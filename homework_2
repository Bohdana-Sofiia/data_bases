DROP DATABASE IF EXISTS homework_2;
CREATE DATABASE homework_2;
USE homework_2;

CREATE TABLE customers (
    customer_id INT AUTO_INCREMENT PRIMARY KEY,
    first_name VARCHAR(50),
    last_name VARCHAR(50),
    email VARCHAR(100),
    country VARCHAR(100)
);

CREATE TABLE products (
    product_id INT AUTO_INCREMENT PRIMARY KEY,
    product_name VARCHAR(100),
    category_id INT,
    price DECIMAL(10,2)
);

CREATE TABLE orders (
    order_id INT AUTO_INCREMENT PRIMARY KEY,
    customer_id INT,
    product_id INT,
    quantity INT,
    order_date DATETIME,
    FOREIGN KEY (customer_id) REFERENCES customers(customer_id),
    FOREIGN KEY (product_id) REFERENCES products(product_id)
);

-- AI generated
EXPLAIN ANALYZE
SELECT 
    c.country, 
    SUM(p.price * o.quantity) AS total_sales
FROM orders o
JOIN customers c
    ON o.customer_id = c.customer_id
JOIN products p
    ON o.product_id = p.product_id
WHERE o.order_date >= '2024-01-01'
  AND p.price > 0
GROUP BY c.country
ORDER BY total_sales DESC;


-- optimized 

CREATE INDEX idx_orders_date ON orders(order_date);
CREATE INDEX idx_customers_country ON customers(country);
CREATE INDEX idx_products_price ON products(price);


EXPLAIN ANALYZE
WITH filtered_orders AS (
    SELECT /*+ INLINE */
    order_id, customer_id, product_id, quantity
    FROM orders
    WHERE order_date >= '2024-01-01'
)
SELECT /*+ STRAIGHT_JOIN */
       c.country,
       SUM(p.price * fo.quantity) AS total_sales
FROM filtered_orders fo
JOIN customers c USE INDEX (idx_customers_country)
    ON fo.customer_id = c.customer_id
JOIN products p USE INDEX (idx_products_price)
    ON fo.product_id = p.product_id
WHERE p.price > 0
GROUP BY c.country
ORDER BY total_sales DESC;
